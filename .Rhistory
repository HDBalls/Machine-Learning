download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv",method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv",method = "curl")
install.packages("data.table")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("lmtest")
install.packages("flextable")
install.packages("caret")
library("data.table")
library("ggplot2")
library("lmtest")
library("flextable")
library("dplyr")
library("tinytex")
library("caret")
training_set <- tbl_df(fread("training.csv",na.strings=c('#DIV/0!', '', 'NA')))
testing_set  <- tibble::as_tibble(fread("testing.csv",na.strings=c('#DIV/0!', '', 'NA')))
testing_set  <- tibble::as_tibble(fread("testing.csv",na.strings=c('#DIV/0!', '', 'NA')))
training_set <- tibble::as_tibble(fread("training.csv",na.strings=c('#DIV/0!', '', 'NA')))
summary(training_set)
summary(testing_set)
summary(testing_set)
clean_data<-names(test[,colMeans(is.na(test))==0])
clean_data<-names(testing_set[,colMeans(is.na(testing_set))==0])
head(clean_data)
summary(clean_data)
summary(clean_data$problem_id)
head(clean_data$problem_id)
head(clean_data$classe)
View(training_set)
exit_values_1 <- tibble(
"Observations" = "20",
"Variables" = "160"
flextable(exit_values_1)
exit_values_1 <- tibble(
"Observations" = "20",
"Variables" = "160"
)
exit_values_1 <- tibble(
"Observations" = "20",
"Variables" = "160")
flextable(exit_values_1)
Testing Set
exit_values_1 <- tibble(
"Observations" = "20",
"Variables" = "160")
flextable(exit_values_1)
Training Set
exit_values_2 <- tibble(
"Observations" = "20",
"Variables" = "19622")
flextable(exit_values_2)
set.seed(171)
training_sub_set <- createDataPartition( y = training_set$classe,
p = 0.7,
list = FALSE)
real_training <- training[training_sub_set,]
real_validation <- training[-training_sub_set,]
training_sub_set <- createDataPartition( y = training_set$classe,
p = 0.7,
list = FALSE)
real_training <- training_set[training_sub_set,]
real_validation <- training_set[-training_sub_set,]
training_sub_set <- createDataPartition( y = training_set$classe,p = 0.7,list = FALSE)
real_training <- training_set[training_sub_set,]
real_validation <- training_set[-training_sub_set,]
NA_vals <- sapply(real_training,function(x) mean(is.na(x))) > 0.95
NA_vals
summary(NA_vals)
head(NA_vals)
real_training <- real_training[,NA_vals==FALSE]
real_validation <- real_validation[,NA_vals==FALSE]
View(real_validation)
View(training_sub_set)
View(training_set)
nzv <- nearZeroVar(actual.training)
nzv <- nearZeroVar(real_training) #Using the training across both datasets as there has to be conformity
real_training <- real_training[,-nzv]
real_validation <- real_validation[,-nzv]
actual.training <- actual.training[,-(V1, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp)]
actual.training <- actual.training[,-V1, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp]
real_training <- real_training[,-V1, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp]
real_training <- real_training[,-(V1, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp)]
real_training_clean = select(real_training, -V1, -user_name, -raw_timestamp_part_1, -raw_timestamp_part_2, -cvtd_timestamp)
real_validation_clean = select(real_validation, -V1, -user_name, -raw_timestamp_part_1, -raw_timestamp_part_2, -cvtd_timestamp)
exit_values_1 <- tibble(
"Observations" = "20",
"Observations 2" = ncol(testing_set),
"Variables" = "160")
flextable(exit_values_1)
exit_values_1 <- tibble(
"Observations" = ncol(testing_set),
"Variables" = count(testing_set))
flextable(exit_values_1)
exit_values_1 <- tibble(
"Observations" = ncol(testing_set),
"Variables" = nrow(testing_set))
flextable(exit_values_1)
exit_values_2 <- tibble(
"Observations" = ncol(training_set),
"Variables" = nrow(training_set))
flextable(exit_values_2)
exit_values_1 <- tibble(
"Observations" = ncol(real_validation_clean),
"Variables" = nrow(real_validation_clean))
flextable(exit_values_1)
exit_values_2 <- tibble(
"Observations" = ncol(real_training_clean),
"Variables" = nrow(real_training_clean))
flextable(exit_values_2)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
cvtd_timestamp
?trainControl
?metric
set.seed(171)
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
tr_Control = control,
verbose = FALSE)
warnings()
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
tr_Control = control,
verbose = FALSE)
set.seed(171)
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
tr_Control = control,
metric="Accuracy",
verbose = FALSE)
set.seed(1234)
modelBM <- train( classe ~.,
data = real_training_clean,
method = "gbm",
trControl = trainControl(method="repeatedcv",number = 5,repeats = 1),
verbose = FALSE)
?tr_Control
?trControl
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
trControl = control,
verbose = FALSE)
control <- trainControl(method="repeatedcv",number = 5,repeats = 1)
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
trControl = control,
verbose = FALSE)
controlRF <- trainControl(method="cv",number=5))
controlRF <- trainControl(method="cv",number=5)
controlRF <- trainControl(method="cv",number=5)
model_RF  <- train(classe ~.,
data = real_training_clean,
method = "rf",
trControl = controlRF)
set.seed(1234)
model_results <- resamples(list(lda=model_lda, knn=model_knn, gbm=model_GBM, rf=model_RF))
model_RF
model_knn
model_knn <- train(classe~.,
data=real_training_clean,
method="knn",
metric="Accuracy",
trControl=control)
model_knn
model_GBM
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
trControl = control,
verbose = FALSE)
set.seed(171)
model_GBM <- train(classe ~.,
data = real_training_clean,
method = "gbm",
trControl = control,
verbose = FALSE)
set.seed(171)
model_lda <- train(classe~.,
data=real_training_clean,
method="lda",
metric="Accuracy",
trControl=control)
model_results <- resamples(list(lda=model_lda, knn=model_knn, gbm=model_GBM, rf=model_RF))
summary(model_results)
